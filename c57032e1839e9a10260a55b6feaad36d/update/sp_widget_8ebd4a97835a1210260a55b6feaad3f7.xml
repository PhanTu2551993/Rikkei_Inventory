<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function() {
  /* widget controller */
  var c = this;
	
		// Phân trang 

	c.pageNumber = 1;
	c.pageSize = 10; 
	c.totalCount = 0;

	c.loadPage = function (pageNumber) {
		c.pageNumber = pageNumber;
		c.server.get({
			action: "getHistory",
			pageNumber: c.pageNumber,
			pageSize: c.pageSize,
		}).then(function (r) {
			c.data.histories = r.data.histories;
			c.totalCount = r.data.totalCount;
		}).catch(function (error) {
			console.error('Error while fetching inventory:', error);
		});
	};

	c.getRoundedPageCount = function () {
		return Math.ceil(c.totalCount / c.pageSize); 
	};

	c.loadPage(c.pageNumber);
};]]></client_script>
        <controller_as>c</controller_as>
        <css>body {
  font-family: Arial, sans-serif;
  margin: 20px;
}

.heading {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 30px;
}

.title {
  border-top: 1px solid #ddd;
  border-left: 1px solid #ddd;
  border-right: 1px solid #ddd;
  display: inline-block;
  padding: 0 16px;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  background-color:  #f7f7f7;
  
}

.title h3 {
  line-height: 40px;
  height: 40px;
  margin : 0;
}

.layout_wrapper {
  border: 1px solid #ddd;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 100%;
  margin: 0 auto;
}

.layout_wrapper h5 {
  margin: 0;
  padding-left: 16px;
  line-height: 40px;
  background-color: #f7f7f7;
  border-bottom: 1px solid #ddd;
}

table {
  width: 100%;
  border-collapse: collapse;
}

.table_inner {
  margin: 16px;
  overflow: auto;
}

th,
td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: center;
  white-space: nowrap;
}

th {
  background-color: #343a40;
  color: white;
}

tr:hover {
  color: #212529;
  background-color: rgba(0, 0, 0, 0.075);
}
.pagination-controls{
margin : 20px
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>add_history</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Add_History</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */
	var pageNumber = 1; 
	var pageSize = 3;   
	data.histories = getHistory(pageNumber, pageSize);

	if (input) {
		if (input.action === "getHistory") {
			pageNumber = input.pageNumber;
			pageSize = input.pageSize;    
			data.histories = getHistory(pageNumber, pageSize);
			data.totalCount = getHistoryCount();
		}
		
		data.histories = getHistory(pageNumber, pageSize);
		data.totalCount = getHistoryCount();
	}
})();

function getHistory(pageNumber, pageSize) {
	var histories = [];
	try {
		var his = new GlideRecord('x_1568427_inventor_transaction_history');
		his.orderByDesc('sys_created_on')
		his.query();
		var start = (pageNumber - 1) * pageSize; 
		var end = start + pageSize;             
		var index = 0;                          

		while (his.next()) {
			if (index >= start && index < end) {
				histories.push({
					sys_id: his.getValue('sys_id'),
					time: his.getValue('time'),
					action_by: his.getValue('action_by'),
					type: his.getDisplayValue('type'),
					description: his.getValue('description'),
					remarks: his.getValue('remarks'),
					item_name: his.getValue('item_name'),
					quantity_old: his.getValue('quantity_old'),
					quantity_new: his.getValue('quantity_new'),
					quantity_changed: his.getValue('quantity_changed'),
					item_id: his.getDisplayValue('item_id'),
					borrow_id: his.getValue('borrow_id'),
					start:start,
				});
			}
			index++;
			if (index >= end) break; 
		}
	} catch (e) {
		gs.error('Lỗi lấy dữ liệu: ' + e.message);
	}
	return histories;
}

function getHistoryCount() {
	var count = 0;
	try {
		var gr = new GlideRecord('x_1568427_inventor_transaction_history');
		gr.query();
		count = gr.getRowCount();
	} catch (e) {
		gs.error('Lỗi đếm dữ liệu: ' + e.message);
	}
	return count;
}]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-11 09:39:33</sys_created_on>
        <sys_id>8ebd4a97835a1210260a55b6feaad3f7</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>Add_History</sys_name>
        <sys_package display_value="Inventory Management" source="x_1568427_inventor">c57032e1839e9a10260a55b6feaad36d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Inventory Management">c57032e1839e9a10260a55b6feaad36d</sys_scope>
        <sys_update_name>sp_widget_8ebd4a97835a1210260a55b6feaad3f7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-15 07:55:43</sys_updated_on>
        <template><![CDATA[<body>
  <div class="heading">
    <h1>Inventory Control Application</h1>
  </div>
  <div class="title">
    <h3>
      In / Out History
    </h3>
  </div>
  <div class="layout_wrapper">
    <h5>Stock Movement History</h5>

    <div class="table_inner">
      <table>
        <thead>
          <tr>
            <th>Date & Time</th>
            <th>Item ID</th>
            <th>Item Name</th>
            <th>Quantity Total</th>
            <th>Current Quantity</th>
            <th>Quantity Changed</th>
            <th>Action</th>
            <th>Requester</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="his in data.histories">
            <td>{{ his.time }}</td>
            <td>{{ his.item_id }}</td>
            <td>{{ his.item_name }}</td>
            <td>{{ his.quantity_old }}</td>
            <td>{{ his.quantity_new }}</td>
            <td>{{ his.quantity_changed }}</td>
            <td>{{ his.type }}</td>
            <td>{{ his.action_by }}</td>
            <td>{{ his.description }}</td>

          </tr>
        </tbody>
      </table>
    </div>

    <div class="pagination-controls">
      <button class="btn btn-secondary" ng-disabled="c.pageNumber === 1" ng-click="c.loadPage(c.pageNumber - 1)">
        Previous
      </button>

      <span>Page {{ c.pageNumber }} of {{ c.getRoundedPageCount() }}</span>

      <button class="btn btn-secondary" ng-disabled="c.pageNumber >= c.getRoundedPageCount()"
              ng-click="c.loadPage(c.pageNumber + 1)">
        Next
      </button>
    </div>

  </div>
</body>]]></template>
    </sp_widget>
</record_update>
