<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function(spModal,spUtil) {
	/* widget controller */
	var c = this;
	var updateId = null;
	c.showModal = false;
	c.showAdd = false;
	c.closeModal = function () {
		c.showModal = false;
	};
	c.openModal = function () {
		c.showModal = true;
	};

	//ADD
	c.newInve = {};

	c.addnewInve = function() {
			var existingItem = c.data.inventories.find(function(inventoryItem) {
					return inventoryItem.item_name === c.newInve.item_name;
			});

			if (existingItem) {
					spUtil.addErrorMessage("The item name already exists in the inventory.");
					return;
			}

			if (!c.newInve.quantity || c.newInve.quantity <= 0 || isNaN(c.newInve.quantity)) {
					spUtil.addErrorMessage("Quantity must be a positive number greater than 0.");
					return;
			}

			if (!c.newInve.price || c.newInve.price <= 0 || isNaN(c.newInve.price)) {
					spUtil.addErrorMessage("Price must be a positive number greater than 0.");
					return;
			}

			c.server.get({
					action: "addnewInve",
					newInve: c.newInve
			}).then(function(r) {
					c.newInve = {};
					c.data.inventories = r.data.inventories;
					spUtil.addTrivialMessage("New inventory has been added successfully.");
			}).catch(function(error) {
					console.error('Error while adding new inventory:', error);
					spUtil.addErrorMessage("An error occurred while adding the inventory.");
			});
	};


	// Detail

	c.detail = function(inveId){
		c.showModal = true;
		c.server.get({
			action:"detailInve",
			inveId:inveId
		}).then(function(r){
			c.data.detailInve = r.data.detailInve;
		}).catch(function(e){
			console.error('Error while Detail Inventory:', e);
		})
	}

	//Update

	c.fillUpdate = function(inveId) {
        updateId = inveId;
        c.showAdd = true;
        c.server.get({
            action: "fillField",
            id: inveId
        }).then(function(r) {
            c.newInve.item_name = r.data.fillField.item_name;
            c.newInve.quantity = Number(r.data.fillField.quantity);
            c.newInve.price = Number(r.data.fillField.price);
            c.newInve.category = r.data.fillField.category;
            c.newInve.remarks = r.data.fillField.remarks;
        }).catch(function(e) {
            console.error('Error while Update Inventory:', e);
        });
    };

   c.update = function() {
    var existingItem = c.data.inventories.find(function(inventoryItem) {
        return inventoryItem.item_name === c.newInve.item_name && inventoryItem.sys_id !== updateId;
    });
		 

    if (existingItem) {
        spUtil.addErrorMessage("The item name already exists in the inventory.");
        return;
    }

    var quantity = Number(c.newInve.quantity);
    if (isNaN(quantity) || quantity <= 0) {
        spUtil.addErrorMessage("Quantity must be a positive number greater than 0.");
        return;
    }


    var price = Number(c.newInve.price);
    if (isNaN(price) || price <= 0) {
        spUtil.addErrorMessage("Price must be a positive number greater than 0.");
        return;
    }

    c.server.get({
        action: "updateInve",
        newInve: c.newInve,
        updateId: updateId
    }).then(function(r) {
        c.showAdd = false;
        c.newInve = {};
        c.data.inventories = r.data.inventories;
        spUtil.addTrivialMessage("Inventory has been updated successfully.");
    }).catch(function(e) {
        console.error('Error while updating inventory:', e);
        spUtil.addErrorMessage("An error occurred while updating the inventory.");
    });
	};

	//Delete

	c.delete = function (inveId) {
    spModal.confirm("Are you sure you want to delete this Note record?").then(function (confirmed) {
        if (confirmed) {
            c.server.get({
                action: "deleteInve",
                inveId: inveId
            }).then(function (r) {
                spUtil.addTrivialMessage("Inventory has been deleted.");
                c.data.inventories = r.data.inventories;
                c.formData = {}; 

            }).catch(function (e) {
                console.error('Error while Delete Inventory:', e);
                spUtil.addErrorMessage("Failed to delete the Inventory. Please try again.");
            });
        }
    });
	}

	// Phân trang 

	c.pageNumber = 1;
	c.pageSize = 3; 
	c.totalCount = 0;

	c.loadPage = function (pageNumber) {
		c.pageNumber = pageNumber;
		c.server.get({
			action: "getInventory",
			pageNumber: c.pageNumber,
			pageSize: c.pageSize,
		}).then(function (r) {
			c.data.inventories = r.data.inventories;
			c.totalCount = r.data.totalCount;
			console.log('count',r.data.totalCount)
		}).catch(function (error) {
			console.error('Error while fetching inventory:', error);
		});
	};
	
	c.getRoundedPageCount = function () {
  return Math.ceil(c.totalCount / c.pageSize); 
};

	c.loadPage(c.pageNumber);

};]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Card styling */
.card {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}

.card-header {
  background-color: #f9f9f9;
  padding: 15px;
  font-size: 18px;
  font-weight: bold;
  border-bottom: 1px solid #ddd;
  text-align: center;
}

.card-body {
  padding: 20px;
}

/* Form layout */
.form-row {
  display: flex;
  flex-wrap: wrap;
  align-content: center;
  justify-content: space-between;
  gap: 10px;
}

/* Form groups */
.form-group {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  margin-bottom: 10px;
}

.form-group label {
  margin-bottom: 5px;
  font-weight: bold;
  font-size: 14px;
}

.form-group input {
  padding: 8px 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

/* Align the button to the bottom */
.form-group.align-self-end {
  display: flex;
  align-items: flex-end;
}

/* Button styling */


.btn:hover {
  background-color: #0056b3;
}

.btn-block {
  width: 100%;
}

.main-table{
  width : 100%;
  height : auto;
  border-radius: 8px;
  box-shadow: rgba(0, 0, 0, 0.05) 0px 6px 24px 0px, rgba(0, 0, 0, 0.08) 0px 0px 0px 1px;
  margin-top:20px;
}
th,td{
  text-align: center;
}
thead{
  background-color: black;
  color :white;
  border-radius: 8px;
}

.header{
  text-align: center;
  margin-bottom:20px;
}

.custom-btn {
  height: 30px;
  line-height: 30px;
  text-align: center; 
  display: inline-block; 
  padding: 0 12px; 
  font-size: 14px; 
  vertical-align: middle;
  margin-right:10px;
}

.custom-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.custom-modal {
  background-color: #fff;
  border-radius: 8px;
  padding: 20px;
  width: 400px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.custom-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}

.custom-modal-header h5 {
  margin: 0;
  font-size: 18px;
  font-weight: bold;
}

.close-btn {
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
}

.custom-modal-body {
  display: flex;
  flex-direction: column;
  gap: 12px; 
}

.row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border: 1px solid #ddd;
  padding: 8px;
  border-radius: 4px;
  position: relative;
}

.label {
  flex: 1;
  color: black;
  font-weight: 700;
  border-right: 1px solid #ddd; 
  padding-right: 8px;
}

.value {
  flex: 1;
  text-align: center;
  padding-left: 8px;
}

.custom-modal-footer {
  display: flex;
  justify-content: flex-end;
  margin-top: 16px;
}

.btn-secondary {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px 16px;
  cursor: pointer;
}

.btn-secondary:hover {
  background-color: #e0e0e0;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>add_and_list_inventory</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Add and List Inventory</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* Gán dữ liệu cho object 'data' */
	data.detailInve = {};
	var pageNumber = 1; 
	var pageSize = 3;   
	//data.inventories = getInventory(pageNumber, pageSize);
	//data.totalCount = getInventoryCount();

	if (input) {
		if (input.action === "getInventory") {
			pageNumber = input.pageNumber;
			pageSize = input.pageSize;    
			data.inventories = getInventory(pageNumber, pageSize);
			data.totalCount = getInventoryCount();
		}

		if (input.action === "addnewInve") {
			var newInve = input.newInve;
			try {
				var ive = new GlideRecord('x_1568427_inventor_item');
				ive.initialize();
				ive.item_name = newInve.item_name;
				ive.quantity = newInve.quantity;
				ive.price = newInve.price;
				ive.category = newInve.category;
				ive.remarks = newInve.remarks;
				ive.insert();
			} catch (e) {
				gs.error('Lỗi thêm mới dữ liệu: ' + e.message);
			}
		}

		if (input.action === "detailInve") {
			var inveId = input.inveId;
			data.detailInve = detailInve(inveId);
		}

		if (input.action === "fillField") {
			var id = input.id;
			data.fillField = detailInve(id);
		}

		if (input.action === "updateInve") {
			var gr = new GlideRecord('x_1568427_inventor_item');
			if (gr.get(input.updateId)) {
				if (input.newInve.item_name) { gr.item_name = input.newInve.item_name; }
				if (input.newInve.quantity) { gr.quantity = input.newInve.quantity; }
				if (input.newInve.price) { gr.price = input.newInve.price; }
				if (input.newInve.category) { gr.category = input.newInve.category; }
				if (input.newInve.remarks) { gr.remarks = input.newInve.remarks; }
				gr.update();
			}
		}

		if (input.action === "deleteInve") {
			var inventor = new GlideRecord('x_1568427_inventor_item');
			if (inventor.get(input.inveId)) {
				inventor.deleteRecord();
			}
		}
	}
})();

function getInventory(pageNumber, pageSize) {
	var inventories = [];
	try {
		var ive = new GlideRecord('x_1568427_inventor_item');
		ive.orderBy('number');
		ive.query();
		var start = (pageNumber - 1) * pageSize; 
		var end = start + pageSize;             
		var index = 0;                          

		while (ive.next()) {
			if (index >= start && index < end) {
				inventories.push({
					sys_id: ive.getValue('sys_id'),
					item_name: ive.getValue('item_name'),
					number: ive.getValue('number'),
					quantity: ive.getValue('quantity'),
					price: ive.getValue('price'),
					category: ive.getValue('category'),
					remarks: ive.getValue('remarks'),
				});
			}
			index++;
			if (index >= end) break; 
		}
	} catch (e) {
		gs.error('Lỗi lấy dữ liệu: ' + e.message);
	}
	return inventories;
}

function detailInve(inveId) {
	var detailInve = {};
	try {
		var gr = new GlideRecord('x_1568427_inventor_item');
		if (gr.get(inveId)) {
			$sp.getRecordValues(detailInve, gr, 'item_name,number,quantity,price,category,remarks,sys_updated_on,sys_created_on,sys_created_by,sys_updated_by');
		}
	} catch (e) {
		gs.error('Lỗi lấy chi tiết: ' + e.message);
	}
	return detailInve;
}

function getInventoryCount() {
	var count = 0;
	try {
		var gr = new GlideRecord('x_1568427_inventor_item');
		gr.query();
		count = gr.getRowCount();
	} catch (e) {
		gs.error('Lỗi đếm dữ liệu: ' + e.message);
	}
	return count;
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-06 02:51:03</sys_created_on>
        <sys_id>65408f6583de9a10260a55b6feaad396</sys_id>
        <sys_mod_count>112</sys_mod_count>
        <sys_name>Add and List Inventory</sys_name>
        <sys_package display_value="Inventory Management" source="x_1568427_inventor">c57032e1839e9a10260a55b6feaad36d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Inventory Management">c57032e1839e9a10260a55b6feaad36d</sys_scope>
        <sys_update_name>sp_widget_65408f6583de9a10260a55b6feaad396</sys_update_name>
        <sys_updated_by>sonnguyen</sys_updated_by>
        <sys_updated_on>2024-12-09 08:22:31</sys_updated_on>
        <template><![CDATA[<div>

  <div class="card mb-4 mt-4">
    <div class="card-header" ng-if="!c.showAdd">Add New Item</div>
    <div class="card-header" ng-if="c.showAdd">Update Item</div>
    <div class="card-body">
      <form id="addItemForm" ng-submit="c.addnewInve()">
        <div class="form-row">
          <div class="form-group col-md-2">
            <label for="itemName">Item Name</label>
            <input
                   type="text"
                   class="form-control"
                   id="itemName"
                   required
                   ng-model = "c.newInve.item_name"
                   />
          </div>
          <div class="form-group col-md-1">
            <label for="quantity">Quantity</label>
            <input
                   type="number"
                   class="form-control"
                   id="quantity"
                   ng-model = "c.newInve.quantity"
                   required
                   />
          </div>
          <div class="form-group col-md-1">
            <label for="unitPrice">Unit Price</label>
            <input
                   type="number"
                   class="form-control"
                   ng-model = "c.newInve.price"
                   required
                   />
          </div>
          <div class="form-group col-md-2">
            <label for="category">Category</label>
            <select class="form-control" id="category" ng-model = "c.newInve.category" required >
              <option value="" disabled selected>Select Category</option>
              <option value="Electronics">Electronics</option>
              <option value="Furniture">Furniture</option>
              <option value="Clothing">Clothing</option>
              <option value="Food">Food</option>
            </select>
          </div>
          <div class="form-group col-md-2">
            <label for="remarks">Remarks</label>
            <input
                   type="text"
                   class="form-control"
                   ng-model = "c.newInve.remarks"
                   id="remarks"
                   />
          </div>
          <div class="form-group col-md-2 align-self-end">
            <button
                    type="submit"
                    class="btn btn-primary btn-block"
                    ng-if="!c.showAdd"
                    >
              Add Item
            </button>
            <button
                    type="button"
                    class="btn btn-primary btn-block"
                    ng-click="c.update()"
                    ng-if="c.showAdd"
                    >
              Update
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>


  <div class="main-table">
    <table class="table table-hover">
      <thead>
        <tr>
          <th scope="col">Index</th>
          <th scope="col">Item Name</th>
          <th scope="col">Item ID</th>
          <th scope="col">Quantity</th>
          <th scope="col">Unit Price</th>
          <th scope="col">Category</th>
          <th scope="col">Remarks</th>
          <th scope="col">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="ive in data.inventories">
          <td>{{(c.pageNumber - 1) * c.pageSize + $index + 1  }}</td>
          <td>{{ ive.item_name }}</td>
          <td>{{ ive.number }}</td>
          <td>{{ ive.quantity }}</td>
          <td>{{ ive.price }}</td>
          <td>{{ ive.category }}</td>
          <td>{{ ive.remarks }}</td>
          <td>
            <button type="button" class="btn btn-info custom-btn" ng-click="c.detail(ive.sys_id)">Detail</button>
            <button type="button" class="btn btn-warning custom-btn" ng-click="c.fillUpdate(ive.sys_id)">Update</button>
            <button type="button" class="btn btn-danger custom-btn" ng-click="c.delete(ive.sys_id)" >Delete</button>
          </td>
        </tr>
      </tbody>
    </table>   
  </div>

  <div class="pagination-controls">
    <button class="btn btn-secondary"
            ng-disabled="c.pageNumber === 1"
            ng-click="c.loadPage(c.pageNumber - 1)">
      Previous
    </button>

    <span>Page {{ c.pageNumber }} of {{ c.getRoundedPageCount() }}</span>

    <button class="btn btn-secondary"
            ng-disabled="c.pageNumber >= c.getRoundedPageCount()"
            ng-click="c.loadPage(c.pageNumber + 1)">
      Next
    </button>
  </div>

  <div ng-show="c.showModal" class="custom-modal-overlay">
    <div class="custom-modal">
      <div class="custom-modal-header">
        <h5>Detail Inventory</h5>
        <button type="button" class="close-btn" ng-click="c.closeModal()">×</button>
      </div>
      <div class="custom-modal-body">
        <div class="row">
          <div class="label" style="font-weight: 700 !important;font-size: 14px !important;">Item Name :</div>
          <div class="value">{{ data.detailInve.item_name }}</div>
        </div>
        <div class="row">
          <div class="label" style="font-weight: 700 !important;font-size: 14px !important;">Item ID :</div>
          <div class="value">{{ data.detailInve.number }}</div>
        </div>
        <div class="row">
          <div class="label" style="font-weight: 700 !important;font-size: 14px !important;">Updated on :</div>
          <div class="value">{{ data.detailInve.sys_updated_on }}</div>
        </div>
        <div class="row">
          <div class="label" style="font-weight: 700 !important;font-size: 14px !important;">Created on :</div>
          <div class="value">{{ data.detailInve.sys_created_on }}</div>
        </div>
        <div class="row">
          <div class="label" style="font-weight: 700 !important;font-size: 14px !important;">Created by :</div>
          <div class="value">{{ data.detailInve.sys_created_by }}</div>
        </div>
        <div class="row">
          <div class="label" style="font-weight: 700 !important;font-size: 14px !important;">Updated by :</div>
          <div class="value">{{ data.detailInve.sys_updated_by }}</div>
        </div>

      </div>
      <div class="custom-modal-footer">
        <button type="button" class="btn-secondary" ng-click="c.closeModal()">Close</button>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
