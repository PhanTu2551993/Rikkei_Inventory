<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function() {
	/* widget controller */
	var c = this;
	var totalItems;
	c.inventories = c.data.inventories;
	c.borroweds = c.data.borroweds;
	c.totalItems = c.inventories.length;

	var totalQuantity = 0;
	var totalBorrowed = 0;
	var totalPrice = 0;
	var totalInventoryPrice = 0;

	var totalPriceBooks = 0;
	var totalInventoryPriceBooks = 0;
	var totalborrowedBooks = 0;
	var totalQuantityBooks = 0;

	var totalPriceElectronics = 0;
	var totalInventoryPriceElectronics = 0;
	var totalborrowedElectronics = 0;
	var totalQuantityElectronics = 0;

	var totalPriceOffice = 0;
	var totalInventorylPriceOffice = 0;
	var totalborrowedOffice = 0;
	var totalQuantityOffice = 0;

	var totalPriceVehicles = 0;
	var totalInventoryPriceVehicles = 0;
	var totalborrowedVehicles = 0;
	var totalQuantityVehicles = 0;

	var percentBorrowTotal = 0;
	for (var i = 0; i < c.inventories.length; i++) {
		var quantity = parseInt(c.inventories[i].quantity, 10) || 0;
		var borrowedQuantity = parseInt(c.inventories[i].borrowed_quantity, 10) || 0;
		var price = parseInt(c.inventories[i].price, 10) || 0;

		totalQuantity += quantity;
		totalBorrowed += borrowedQuantity;
		totalPrice += price * quantity;
		totalInventoryPrice += price * borrowedQuantity;
		c.totalInventoryPrice = totalPrice - totalInventoryPrice;
		c.totalPrice = totalPrice;
		if (totalQuantity !== 0) {
			percentBorrowTotal = Math.round((totalBorrowed / totalQuantity) * 100);
		}


		if (c.inventories[i].category === 'Books') {
			totalborrowedBooks += borrowedQuantity;
			totalQuantityBooks += quantity;
			totalPriceBooks += quantity * price;
			totalInventoryPriceBooks += borrowedQuantity*price;
			c.totalQuantityBooks = totalQuantityBooks;
			c.totalborrowedBooks = totalborrowedBooks;
			c.totalPriceBooks = totalPriceBooks;
			c.totalInventoryPriceBooks = totalPriceBooks - totalInventoryPriceBooks;
		}

		if (c.inventories[i].category === 'Electronics') {
			totalborrowedElectronics += borrowedQuantity;
			totalQuantityElectronics += quantity;
			totalPriceElectronics += quantity * price;
			totalInventoryPriceElectronics += borrowedQuantity*price;
			c.totalQuantityElectronics = totalQuantityElectronics;
			c.totalborrowedElectronics = totalborrowedElectronics;
			c.totalPriceElectronics = totalPriceElectronics;
			c.totalInventoryPriceElectronics = totalPriceElectronics - totalInventoryPriceElectronics;
		}

		if (c.inventories[i].category === 'Office') {
			totalborrowedOffice += borrowedQuantity;
			totalQuantityOffice += quantity;
			totalPriceOffice += quantity * price;
			totalInventorylPriceOffice += borrowedQuantity*price;
			c.totalborrowedOffice = totalborrowedOffice;
			c.totalQuantityOffice = totalQuantityOffice;
			c.totalPriceOffice = totalPriceOffice;
			c.totalInventorylPriceOffice = totalPriceOffice - totalInventorylPriceOffice;
		}

		if (c.inventories[i].category === 'Vehicles') {
			totalborrowedVehicles += borrowedQuantity;
			totalQuantityVehicles += quantity;
			totalPriceVehicles += quantity * price;
			totalInventoryPriceVehicles += borrowedQuantity*price;
			c.totalborrowedVehicles = totalborrowedVehicles;
			c.totalQuantityVehicles = totalQuantityVehicles;
			c.totalPriceVehicles = totalPriceVehicles;
			c.totalInventoryPriceVehicles = totalPriceVehicles - totalInventoryPriceVehicles;
		}

	}


	c.totalQuantity = totalQuantity;
	c.totalBorrowed = totalBorrowed;
	c.totalPrice = totalPrice;
	var savedTranslations = localStorage.getItem('translations');
	if (savedTranslations) {
		c.translations = JSON.parse(savedTranslations);
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>
body {
  font-family: Arial, sans-serif;
  background-color: #f4f7fc;
  display: flex;
  /*height: 100vh;*/
  max-width: 1200px;
  margin: 0 auto;
}

/* Sidebar */
.sidebar {
  width: 250px;
  background-color: #2c3e50;
  color: white;
  padding-top: 30px;
  position: fixed;
  height: 100%;
}

.sidebar a {
  color: white;
  text-decoration: none;
  display: block;
  padding: 15px;
  font-size: 18px;
  border-bottom: 1px solid #34495e;
}

.sidebar a:hover {
  background-color: #34495e;
}

.sidebar .active {
  background-color: #1abc9c;
}

/* Main Content */
.content {
  /*margin-left: 250px;*/
  padding: 20px 0 20px 20px;
  /*width: calc(100% - 250px);*/
  width: 100%;
  margin-bottom: 30px;
}

.content h1 {
  color: #333;
  margin-bottom: 30px;
}

/* Dashboard Cards */
.dashboard-cards {
  display: flex;
  justify-content: space-between;
  margin-bottom: 30px;
}

.card {
  background-color: #fff;
  border-radius: 8px;
  padding: 8px;
  box-shadow: rgba(67, 71, 85, 0.27) 0px 0px 0.25em, rgba(90, 125, 188, 0.05) 0px 0.25em 1em;
  width: 24%;
  text-align: center;
}

.card h2 {
  font-size: 30px;
  color: #2c3e50;
}

.card p {
  font-size: 18px;
  color: #7f8c8d;
}

.chart_group {
  display: flex;
  width: 1200px;
  max-width: 100%;
  gap: 14px;
}

/* Column Chart */
.column-chart {
  display: block;
  width: 100%; /* Giảm từ 100% xuống 70% */
  height: 617px;; /* 0.7 x 650px */
  margin-bottom: 21px; /* 0.7 x 30px */
  padding: 14px; /* 0.7 x 20px */
  background-color: #fff;
  border-radius: 5.6px; /* 0.7 x 8px */

  box-shadow: rgba(67, 71, 85, 0.27) 0px 0px 0.175em, rgba(90, 125, 188, 0.05) 0px 0.175em 0.7em;
}

.column-chart h2 {
  text-align: center;
  margin-bottom: 14px; /* 0.7 x 20px */
  font-size: 16.8px; /* 0.7 x 24px */
  color: #2c3e50;
  
}

.chart {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  height: 350px; /* 0.7 x 500px */
  padding: 7px; /* 0.7 x 10px */
  gap: 21px; /* 0.7 x 30px */
  border-bottom: 1.4px solid #000; 
  margin-top:60px;
}

.bar {
  width: 18%; /* 0.7 x 18% */
  background-color: #3498db;
  border-radius: 3.5px; /* 0.7 x 5px */
  position: relative;
  transition: background-color 0.3s ease;
}

.bar:hover {
  background-color: #2980b9;
}

.bar_heading {
  position: absolute;
  bottom: -56px; /* 0.7 x -80px */
  text-align: center;
  padding-top: 8.4px; /* 0.7 x 12px */
  font-size: 16px;
  color: black;
  left: 100%;
  transform: translateX(-50%);
}

.bar_percent {
  position: absolute;
  top: -17.5px; /* 0.7 x -25px */
  font-size: 14px; /* 0.7 x 14px */
  font-weight: bold;
  color: black;
  text-align: center;
  left: 50%;
  transform: translateX(-50%);
}

.bar_title {
  position: absolute;
  font-weight: bold;
  bottom: -38.5px; /* 0.7 x -55px */
  width: 100%;
  display: block;
  text-align: center;
  font-size: 15px; 
  color: black;
  left:10px;
}

.bar_quan {
  position: absolute;
  bottom: -19.6px; /* 0.7 x -28px */
  font-size: 9.8px; /* 0.7 x 14px */
  font-weight: bold;
  color: black;
  text-align: center;
  left: 50%;
  transform: translateX(-50%);
}

.bar-total {
  width: 18%; /* 0.7 x 18% */
  background-color: #1abc9c;
  border-radius: 3.5px; /* 0.7 x 5px */
  position: relative;
  transition: background-color 0.3s ease;
  height: 70%; /* Giảm chiều cao xuống 70% */
  right:20px;
  
}

.bar-total .bar_percent {
  font-size: 14px; /* 0.7 x 14px */
  position: relative;
  top:-30px;
}

/* Pie Chart */
.pie-chart {
  display: block;
  width: 100%;
  margin-bottom: 30px;
  padding: 20px;
  background-color: #fff;
  border-radius: 8px;
  box-shadow: rgba(67, 71, 85, 0.27) 0px 0px 0.25em, rgba(90, 125, 188, 0.05) 0px 0.25em 1em;
}

.pie-chart h2 {
  text-align: center;
  margin-bottom: 20px;
  font-size: 24px;
  color: #2c3e50;
}

.pie-container {
  position: relative;
  width: 200px;
  height: 200px;
  margin: 0 auto;
}

.pie {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: conic-gradient(#1abc9c 0% 90%, #3498db 90% 100%);
}

.pie-note { 
  margin-top: 30px;
  display:block;
  font-size: 16px;
  font-weight: 600;
}
.pie-note-list {
  margin-top: 16px;
}

.pie-note-item {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 10px;
}


.pie-note-item span {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  display: block;
}

.pie-note-item h6, .pie-note-item p {
  margin: 0px;
  display : inline-block;
  font-size: 15px;
  font-weight: 500;
  line-height: 26px;
}

.pie-label {
  position: absolute;
  top: 50%; 
  left: 75%; 
  transform-origin: center;
  font-size: 14px;
  font-weight: bold;
  color: black;
  transform: 
    rotate(calc(var(--start) * 3.6deg)) /* Xoay nhãn đến góc của vùng */
    translate(100px) /* Đẩy nhãn ra khỏi tâm biểu đồ */
    rotate(calc(var(--start) * 3deg)); /* Giữ nhãn thẳng */
  text-align: center;
  rotate: -70deg;
}
.pie-label::after {
  content: attr(data-label);
}

.column-chart-2 {
  width: 700px;
  margin-left: 100px;
  margin-right: 30px;
  text-align: center;
  padding-bottom:60px;
  
}

/* Chart Container */
.chart_with_axis {
  display: flex;
  align-items: flex-end;
  border-left: 2px solid #333;
  border-bottom: 2px solid #333;
  height: 600px; /* Điều chỉnh chiều cao tổng */
  padding: 10px;
  position: relative;
}

/* Trục Y và Nhãn */
.chart_axis {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%; 
  margin-right: 10px;
}
.axis_label {
  font-size: 12px;
  color: #333;
}

/* Stacked Bar */
.stacked-bar {
  width: 120px;
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-left:50px;
  //border: 1px solid #ddd;
  //background-color: #f9f9f9;
  position: relative;
}

.stacked-segment {
  width: 100%;
  position: relative;
  text-align: center;
  color: #fff;
  font-size: 12px;
}


.stacked-total {
  position: absolute;
  top: -30px; /* Đẩy tổng lên phía trên */
  text-align: center;
  font-weight: bold;
  font-size: 14px;
  color: #333;
}

.total_value {
  margin: 0;
}

.stacked-note {
    position: absolute;
    bottom: -60px; /* Đưa phần tử xuống dưới cùng của cột */
    width: 100%;
    text-align: center; /* Căn giữa chữ */
    padding-top: 5px; /* Để có một chút khoảng cách với phần cuối cột */
    font-weight: bold;
    color: #333; /* Màu chữ có thể thay đổi tùy ý */
}


.pie-note {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 10px;
}


.pie-note span {
  width: 25px;
  height: 15px;
  border-radius: 5px;
  display: block;
}

.pie-note h6, .pie-note p {
  margin: 0px;
  display : inline-block;
  font-size: 15px;
  font-weight: 500;
  line-height: 26px;
}

.chart_group-2 {
  display: flex;
  width: 1200px;
  max-width: 100%;
  gap: 14px;
  border-radius: 8px;
  box-shadow: rgba(67, 71, 85, 0.27) 0px 0px 0.25em, rgba(90, 125, 188, 0.05) 0px 0.25em 1em;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>new_dashboard</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>New_Dashboard</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	data.isAdmin = gs.hasRole('x_1568427_inventor.admin'); 
	data.isUser = gs.hasRole('x_1568427_inventor.user');
	data.inventories = getInventory();
	data.borroweds = getBorroweds();
})();

function getInventory() {
	var inventories = [];
	try {
		var ive = new GlideRecord('x_1568427_inventor_item');
		ive.addQuery('active','1')
		ive.query(); 
		while (ive.next()) {
			inventories.push({
				sys_id: ive.getValue('sys_id'),
				item_name: ive.getValue('item_name'),
				number: ive.getValue('number'),
				quantity: ive.getValue('quantity'),
				borrowed_quantity: ive.getValue('borrowed_quantity'),
				warning_quantity: ive.getValue('warning_quantity'),
				current_quantity: ive.getValue('current_quantity'),
				low_stock: parseInt(ive.getValue('current_quantity')) < parseInt(ive.getValue('warning_quantity')),
				price: ive.getValue('price'),
				active: ive.getValue('active'),
				category: ive.getValue('category'),
				remarks: ive.getValue('remarks'),
			});
		}
	} catch (e) {
		gs.error('Lỗi lấy dữ liệu: ' + e.message);
	}
	return inventories;
}

function getBorroweds() {
	var borroweds = [];
	try {
		var ive = new GlideRecord('x_1568427_inventor_borrowrequests');
		ive.addQuery('status','approved')
		ive.orderByDesc('sys_created_on');
		ive.query();                       
		while (ive.next()) {
			var borrowed = {
				sys_id: ive.getValue('sys_id'),
				borrower_quantity: ive.getValue('borrower_quantity'),
				created_by: ive.getValue('sys_created_by'),
				created_on: ive.getValue('sys_created_on'),
				updated_on: ive.getValue('sys_updated_on'),
				status: ive.getValue('status'),
			};

			var itemRecord = new GlideRecord('x_1568427_inventor_item');
			if (itemRecord.get(ive.getValue('item_id'))) {
				borrowed.item_name = itemRecord.getValue('item_name');
				borrowed.item_id = itemRecord.getValue('number');
				borrowed.category = itemRecord.getValue('category');
			}

			borroweds.push(borrowed);
		}
	} catch (e) {
		gs.error('Lỗi lấy dữ liệu: ' + e.message);
	}
	return borroweds;
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-30 02:23:37</sys_created_on>
        <sys_id>bd20aad5c3721210f8d83cec050131e7</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>New_Dashboard</sys_name>
        <sys_package display_value="Inventory Management" source="x_1568427_inventor">c57032e1839e9a10260a55b6feaad36d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Inventory Management">c57032e1839e9a10260a55b6feaad36d</sys_scope>
        <sys_update_name>sp_widget_bd20aad5c3721210f8d83cec050131e7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-30 03:05:32</sys_updated_on>
        <template><![CDATA[<div ng-if="data.isAdmin">
  <!-- Main Content -->
  <div class="content">
    <h1 >{{c.translations.Dashboard}} {{c.translations.Inventory_Management}}</h1>

    <!-- Dashboard Cards -->
    <div class="dashboard-cards">
      <div class="card">
        <h2>{{c.totalItems}}</h2>
        <p>{{c.translations.totalItemInventory}}</p>
      </div>
      <div class="card">
        <h2>{{ c.totalQuantity}}</h2>
        <p>{{c.translations.totalQuantity}}</p>
      </div>
      <div class="card">
        <h2>{{ c.totalBorrowed}}</h2>
        <p>{{c.translations.totalBorrowing}}</p>
      </div>
      <div class="card">
        <h2>{{ c.totalPrice.toLocaleString('vi-VN') }} $</h2>
        <p>{{c.translations.totalPrice}}</p>
      </div>
    </div>
  </div>


  <div style="width: 100%; height: 800px; overflow: hidden; position: relative;">
    <iframe 
            src="https://dev210352.service-now.com/now/platform-analytics-workspace/dashboards/params/edit/false/sys-id/57f73e90c3b6d210f8d83cec0501312e"
            style="width: 100%; height:100%; position: absolute; top: -130px; left: 0; border: none;"
            sandbox="allow-same-origin allow-scripts"
            referrerpolicy="no-referrer"
            loading="lazy">
      <p>Your browser does not support iframes.</p>
    </iframe>
  </div>

</div>
]]></template>
    </sp_widget>
</record_update>
