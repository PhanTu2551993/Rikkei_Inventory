<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function(spModal,spUtil) {
	/* widget controller */
	var c = this;
	var updateId = null;
	c.showButtonAdd = false;
	c.showModal = false;
	c.showAddModal = false;
	c.showEditModal = false;

	// Detail Modal

	c.closeModal = function () {
		c.showModal = false;
	};
	c.openModal = function () {
		c.showModal = true;
	};

	//Edit Modal

	c.closeEditModal = function () {
		c.showEditModal = false;
	};


	//Add Modal

	c.closeAddModal = function () {
		c.showAddModal = false;
		c.newInve = {
			item_name: '',
			quantity: '',
			warning_quantity: '',
			price: '',
			category: '',
			remarks: '',
			description:'',
		};
		c.showButtonAdd = false;
	};
	c.openAddModal = function () {
		c.showAddModal = true;
	};

	c.newInve = {
		item_name: '',
		quantity: '',
		warning_quantity: '',
		price: '',
		category: '',
		remarks: '',
		description:'',
	};

	c.editInve = {
		item_name: '',
		quantity: '',
		warning_quantity: '',
		quantity_change:'',
		action_type:'',
		price: '',
		category: '',
		remarks: '',
		description:'',
	};

	//ADD

	c.addnewInve = function() {
		if (!c.newInve.item_name || c.newInve.item_name.trim() === '' || !c.newInve.category || c.newInve.category.trim() === '' || !c.newInve.remarks || c.newInve.remarks.trim() === '' || !c.newInve.description || c.newInve.description.trim() === '') {
			spUtil.addErrorMessage("cannot be empty.");
			return;
		}
		var existingItem = c.data.inventories.find(function(inventoryItem) {
			return inventoryItem.item_name === c.newInve.item_name;
		});

		if (existingItem) {
			spUtil.addErrorMessage("The item name already exists in the inventory.");
			return;
		}
		if (!c.newInve.quantity || c.newInve.quantity <= 0 || isNaN(c.newInve.quantity)) {
			spUtil.addErrorMessage(" Quantity must be a positive number greater than 0.");
			return;
		}
		if (!c.newInve.warning_quantity || c.newInve.warning_quantity <= 0 || isNaN(c.newInve.warning_quantity)) {
			spUtil.addErrorMessage("Warning quantity must be a positive number greater than 0.");
			return;
		}

		if (c.newInve.warning_quantity && c.newInve.warning_quantity > c.newInve.quantity) {
			spUtil.addErrorMessage("Warning quantity cannot exceed the total quantity.");
			return;
		}


		if (!c.newInve.price || c.newInve.price <= 0 || isNaN(c.newInve.price)) {
			spUtil.addErrorMessage(" Price must be a positive number greater than 0.");
			return;
		}
		c.server.get({
			action: "addnewInve",
			newInve: c.newInve,
			pageNumber: c.pageNumber,
			pageSize: c.pageSize,
		}).then(function(r) {
			c.newInve = {
				item_name: '',
				quantity: '',
				warning_quantity: '',
				price: '',
				category: '',
				remarks: '',
				description:'',
			};
			c.data.inventories = r.data.inventories;
			c.totalCount = r.data.totalCount;
			c.showAddModal = false;
			spUtil.addTrivialMessage("New inventory has been added successfully.");
		}).catch(function(error) {
			console.error('Error while adding new inventory:', error);
			spUtil.addErrorMessage("An error occurred while adding the inventory.");
		});
	};


	// Detail

	c.detail = function(inveId){
		c.showModal = true;
		c.server.get({
			action:"detailInve",
			inveId:inveId
		}).then(function(r){
			c.data.detailInve = r.data.detailInve;
			c.data.histories = r.data.histories;
		}).catch(function(e){
			console.error('Error while Detail Inventory:', e);
		})
	}

	//Update

	c.fillUpdate = function(inveId) {
		updateId = inveId;
		c.showEditModal = true;
		c.server.get({
			action: "fillField",
			id: inveId
		}).then(function(r) {
			c.editInve.item_name = r.data.fillField.item_name;
			c.editInve.item_id = r.data.fillField.number;
			c.editInve.quantity = Number(r.data.fillField.quantity);
			c.editInve.warning_quantity = Number(r.data.fillField.warning_quantity);
			c.editInve.price = Number(r.data.fillField.price);
			c.editInve.category = r.data.fillField.category;
			c.editInve.remarks = r.data.fillField.remarks;
			c.editInve.description = r.data.fillField.description;
		}).catch(function(e) {
			console.error('Error while Update Inventory:', e);
		});
	};

	c.update = function() {
		console.log('newInve',c.editInve)
		var quantity = Number(c.editInve.quantity_change);

		if (isNaN(quantity) || quantity < 0) {
			spUtil.addErrorMessage("Quantity must be a positive number greater than 0.");
			return;
		}
		var price = Number(c.editInve.price);
		if (isNaN(price) || price < 0) {
			spUtil.addErrorMessage("Price must be a positive number greater than 0.");
			return;
		}

		c.server.get({
			action: "updateInve",
			editInve: c.editInve,
			updateId: updateId
		}).then(function(r) {
			updateId = null;
			c.showEditModal = false;
			c.editInve = {
				item_name: '',
				quantity: '',
				warning_quantity: '',
				quantity_change:'',
				action_type:'',
				price: '',
				category: '',
				remarks: '',
				description:'',
			};
			c.data.inventories = r.data.inventories;
			c.totalCount = r.data.totalCount;
			c.loadPage(c.pageNumber);
			spUtil.addTrivialMessage("Inventory has been updated successfully.");
		}).catch(function(e) {
			console.error('Error while updating inventory:', e);
			spUtil.addErrorMessage("An error occurred while updating the inventory.");
		});
	};

	//Change Active

	c.changeActive = function (inveId) {
		spModal.confirm("Are you sure you want to change Active this record?").then(function (confirmed) {
			if (confirmed) {
				c.server.get({
					action: "changeActive",
					inveId: inveId
				}).then(function (r) {
					spUtil.addTrivialMessage("Inventory has been change Active.");
					c.data.inventories = r.data.inventories;
					c.pageNumber = 1;
				}).catch(function (e) {
					console.error('Error while Delete Inventory:', e);
					spUtil.addErrorMessage("Failed to change Active the Inventory. Please try again.");
				});
			}
		});
	}

	// PhÃ¢n trang 

	c.pageNumber = 1;
	c.pageSize = 3; 
	c.totalCount = 0;

	c.loadPage = function (pageNumber) {
		c.pageNumber = pageNumber;
		c.server.get({
			action: "getInventory",
			pageNumber: c.pageNumber,
			pageSize: c.pageSize,
		}).then(function (r) {
			c.data.inventories = r.data.inventories;
			console.log("11111",r.data.inventories)
			c.totalCount = r.data.totalCount;
		}).catch(function (error) {
			console.error('Error while fetching inventory:', error);
		});
	};

	c.getRoundedPageCount = function () {
		return Math.ceil(c.totalCount / c.pageSize); 
	};

	c.loadPage(c.pageNumber);

	c.goToPage = function () {
		var page = parseInt(c.targetPage, 10);
		if (!page || page < 1) {
			page = 1; 
		} 
		c.loadPage(page);
	}


	//Translate

	var savedLanguage = localStorage.getItem('preferredLanguage') || 'en';
	var savedTranslations = localStorage.getItem('translations');
	if (savedTranslations) {
		c.translations = JSON.parse(savedTranslations);
	}

};]]></client_script>
        <controller_as>c</controller_as>
        <css>/* Card styling */
.card {
  background: #fff;
  border: 1px solid #ddd;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
}
.card-header {
  background-color: #f9f9f9;
  padding: 15px;
  font-size: 18px;
  font-weight: bold;
  border-bottom: 1px solid #ddd;
  text-align: center;
}
.card-body {
  padding: 20px;
}
/* Form layout */
.form-row {
  display: flex;
  flex-wrap: wrap;
  align-content: center;
  justify-content: space-between;
  gap: 10px;
}
/* Form groups */
.form-group {
  display: flex;
  flex-direction: column;
  justify-content: flex-end;
  margin-bottom: 10px;
}
.form-group label {
  margin-bottom: 5px;
  font-weight: bold;
  font-size: 14px;
}
.form-group input {
  padding: 8px 10px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}
/* Align the button to the bottom */
.form-group.align-self-end {
  display: flex;
  align-items: flex-end;
}

  .input-group {
    display: flex;
    align-items: center;
  }
 
  .input-group .form-control {
    border-right: none;
  }
 
  .borrowQty_input {
    width: 120px;
    margin: 0 auto;
  }
 
  .input-group .btn {
     border-top-right-radius: 4px;
     border-bottom-right-radius: 4px;
  }
/* Button styling */

.btn:hover {
  background-color: #0056b3;
}
.btn-block {
  width: 100%;
}
.main-table{
  width : 100%;
  height : auto;
  border-radius: 8px;
  box-shadow: rgba(0, 0, 0, 0.05) 0px 6px 24px 0px, rgba(0, 0, 0, 0.08) 0px 0px 0px 1px;
  margin-top:20px;
}
th,
td {
  border: 1px solid #ddd;
  padding: 10px;
  text-align: center;
  white-space: nowrap;
}

thead{
  background-color: black;
  color :white;
  border-radius: 8px;
}
.header{
  text-align: center;
  margin-bottom:20px;
}
.custom-btn {
  height: 30px;
  line-height: 30px;
  text-align: center; 
  display: inline-block; 
  padding: 0 12px; 
  font-size: 14px; 
  vertical-align: middle;
  margin-right:10px;
}
.custom-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
  display: block;
  z-index: 1000;
}
.custom-modal {
  background-color: #fff;
  border-radius: 8px;
  padding: 20px;
  width: 450px;
  margin: 8% auto;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  overflow: hidden;
  position: relative;
}
.custom-detail {
  width: 900px;
}
.custom-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 16px;
}
.custom-modal-header h5 {
  margin: 0;
  font-size: 18px;
  font-weight: bold;
}
.close-btn {
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
}
.custom-modal-body {
  display: flex;
  flex-direction: column;
  gap: 12px; 
}


.input_group {
  display: flex;
  align-items: center;
  gap: 10px;
}
.input_growd {
  flex: 1;
}

.input_select {
  display: flex;
  align-items: center;
}


.input_select input{
  position: relative;
  top: -12px;
}

.input_select .checkbox_select {
  width: 18px;
  height: 18px;
}

.input_inner .label_select {
  min-width: 120px;
  width: 0%;
  margin-bottom: 20px;
}

.input_inner label{
  font-size: 14px;
  font-weight: 500;
  color: #3b3b3b;
  min-width: 170px;
  white-space: nowrap;
  width: 100%;
}
.input_inner input,textarea, select {
  width: 100%;
  max-width: 100%;
  height: 36px;
  border: 1px solid #4b4b4b;
  border-radius: 4px;
  outline: none;
  display: block;
  padding:0 6px;
  font-size: 14px; 
  font-weight: 400;
  color: #3b3b3b;
  cursor: pointer;
}

.input_inner textarea {
  min-width: 100%;
  font-size: 16px; 
  line-height: 2;
}
.row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border: 1px solid #ddd;
  padding: 8px;
  border-radius: 4px;
  position: relative;
}
.label {
  flex: 1;
  color: black;
  font-weight: 700;
  border-right: 1px solid #ddd; 
  padding-right: 8px;
}
.value {
  flex: 1;
  text-align: center;
  padding-left: 8px;
}
.custom-modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 16px;
  margin-top: 26px;
}
.btn-secondary {
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 8px 16px;
  cursor: pointer;
  width: 100px;
}
.btn-secondary:hover {
  background-color: #e0e0e0;
}

.custom-modal-table {
  max-width: 100%;
  margin-top: 30px;
  overflow: auto;
}

.tag {
  display: inline-block;
  padding: 3px 6px;
  border: 1px solid red;
  border-radius: 5px;
  color: red;
  font-size: 12px;
  font-weight: bold;
  background-color: #fff;
}

.hidden {
    display: none;
}

.page-input {
  width: 50px;
  height: 36px;
  text-align: center;
  border: 1px solid #ccc;
  border-radius: 4px;
  margin: 0 5px;
  font-size: 14px;
  outline: none;
  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>a_inventory</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>A_Inventory</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* GÃ¡n dá»¯ liá»u cho object 'data' */
	data.detailInve = {};
	var user = gs.getUser();
	var userId = user.getID();
	var pageNumber = 1; 
	var pageSize = 3;   
	data.inventories = getInventory(pageNumber, pageSize);
	//data.totalCount = getInventoryCount();

	if (input) {
		if (input.action === "getInventory") {
			pageNumber = input.pageNumber;
			pageSize = input.pageSize;    
			data.inventories = getInventory(pageNumber, pageSize);
			data.totalCount = getInventoryCount();
		}

		if (input.action === "addnewInve") {
			var newInve = input.newInve;
			try {
				var ive = new GlideRecord('x_1568427_inventor_item');
				ive.initialize();
				ive.item_name = newInve.item_name;
				ive.quantity = newInve.quantity;
				ive.current_quantity = newInve.quantity;
				ive.price = newInve.price;
				ive.category = newInve.category;
				ive.remarks = newInve.remarks;
				ive.description = newInve.description;
				ive.warning_quantity = newInve.warning_quantity;
				ive.manager = userId;
				ive.insert();
			} catch (e) {
				gs.error('Lá»i thÃªm má»i dá»¯ liá»u: ' + e.message);
			}
		}

		if (input.action === "detailInve") {
			var inveId = input.inveId;
			data.detailInve = detailInve(inveId);
			data.histories = getHistory(inveId);
		}

		if (input.action === "fillField") {
			var id = input.id;
			data.fillField = detailInve(id);
		}

		if (input.action === "updateInve") {
			gs.info('editInve: ' + JSON.stringify(input.editInve));
			var gr = new GlideRecord('x_1568427_inventor_item');
			if (gr.get(input.updateId)) {
				if (input.editInve.quantity_change) { gr.quantity_change = input.editInve.quantity_change;}
				if (input.editInve.quantity) { gr.quantity = input.editInve.quantity;}
				if (input.editInve.action_type) { gr.action_type = input.editInve.action_type;}
				if (input.editInve.price) { gr.price = input.editInve.price; }
				if (input.editInve.category) { gr.category = input.editInve.category; }
				if (input.editInve.description) { gr.description = input.editInve.description; }
				gr.update();
			}
		}

		if (input.action === "changeActive") {
			var inventor = new GlideRecord('x_1568427_inventor_item');
			if (inventor.get(input.inveId)) {
				inventor.active = !inventor.active;
				inventor.update();
			}
		}
	}
	data.inventories = getInventory(pageNumber, pageSize);
	data.totalCount = getInventoryCount();
})();

function getInventory(pageNumber, pageSize) {
	var inventories = [];
	try {
		var ive = new GlideRecord('x_1568427_inventor_item');
		ive.orderByDesc('active');
		ive.orderByDesc('sys_created_on');
		ive.query();
		var start = (pageNumber - 1) * pageSize; 
		var end = start + pageSize;             
		var index = 0;                          

		while (ive.next()) {
			if (index >= start && index < end) {
				inventories.push({
					sys_id: ive.getValue('sys_id'),
					item_name: ive.getValue('item_name'),
					number: ive.getValue('number'),
					quantity: ive.getValue('quantity'),
					borrowed_quantity: ive.getValue('borrowed_quantity'),
					warning_quantity: ive.getValue('warning_quantity'),
					current_quantity: ive.getValue('current_quantity'),
					low_stock: parseInt(ive.getValue('current_quantity')) < parseInt(ive.getValue('warning_quantity')),
					price: Number(ive.getValue('price')),
					active: ive.getValue('active'),
					category: ive.getValue('category'),
					remarks: ive.getValue('remarks'),
					start:start,
				});
			}
			index++;
			if (index >= end) break; 
		}
	} catch (e) {
		gs.error('Lá»i láº¥y dá»¯ liá»u: ' + e.message);
	}
	return inventories;
}

function detailInve(inveId) {
	var detailInve = {};
	try {
		var gr = new GlideRecord('x_1568427_inventor_item');
		if (gr.get(inveId)) {
			$sp.getRecordValues(detailInve, gr, 'item_name,number,quantity,price,category,remarks,sys_updated_on,sys_created_on,sys_created_by,sys_updated_by,warning_quantity,description');
		}
	} catch (e) {
		gs.error('Lá»i láº¥y chi tiáº¿t: ' + e.message);
	}
	return detailInve;
}


function getHistory(itemId) {
	var histories = [];
	try {
		var his = new GlideRecord('x_1568427_inventor_transaction_history');
		his.addQuery('item_id',itemId);	
		his.orderByDesc('sys_created_on');
		his.query();                   
		while (his.next()) {
				histories.push({
					sys_id: his.getValue('sys_id'),
					time: his.getValue('time'),
					action_by: his.getValue('action_by'),
					type: his.getDisplayValue('type'),
					description: his.getValue('description'),
					remarks: his.getValue('remarks'),
					item_name: his.getValue('item_name'),
					quantity_old: his.getValue('quantity_old'),
					quantity_new: his.getValue('quantity_new'),
					quantity_changed: his.getValue('quantity_changed'),
					item_id: his.getDisplayValue('item_id'),
					borrow_id: his.getValue('borrow_id'),
				});
		}
	} catch (e) {
		gs.error('Lá»i láº¥y dá»¯ liá»u: ' + e.message);
	}
	return histories;
}


function getInventoryCount() {
	var count = 0;
	try {
		var gr = new GlideRecord('x_1568427_inventor_item');
		gr.query();
		count = gr.getRowCount();
	} catch (e) {
		gs.error('Lá»i Äáº¿m dá»¯ liá»u: ' + e.message);
	}
	return count;
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-12-10 01:35:50</sys_created_on>
        <sys_id>7a659b36835a5210260a55b6feaad3f3</sys_id>
        <sys_mod_count>234</sys_mod_count>
        <sys_name>A_Inventory</sys_name>
        <sys_package display_value="Inventory Management" source="x_1568427_inventor">c57032e1839e9a10260a55b6feaad36d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Inventory Management">c57032e1839e9a10260a55b6feaad36d</sys_scope>
        <sys_update_name>sp_widget_7a659b36835a5210260a55b6feaad3f3</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-12-27 03:32:52</sys_updated_on>
        <template><![CDATA[<body>
  <h1 style="text-align: center;">{{c.translations.Inventory_Management}}</h1>
  <div>
    <button type="submit" class="btn btn-primary" ng-click="c.openAddModal()">
      {{c.translations.butAdd}}
    </button>
    <div class="main-table">
      <table class="table table-hover">
        <thead>
          <tr>
            <th scope="col">{{c.translations.Index}}</th>
            <th scope="col">{{c.translations.Item_Name}}</th>
            <th scope="col">{{c.translations.Item_ID}}</th>
            <th scope="col">{{c.translations.Current_Quantity}}</th>
            <th scope="col">{{c.translations.Borrowed_Quantity}}</th>
            <th scope="col">{{c.translations.Unit_Price}}</th>
            <th scope="col">{{c.translations.Category}}</th>
            <th scope="col">{{c.translations.Remarks}}</th>
            <th scope="col">{{c.translations.Actions}}</th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="ive in data.inventories">
            <td>{{ ive.start + $index + 1 }}</td>
            <td>{{ ive.item_name }}</td>
            <td>{{ ive.number }}</td>
            <td>{{ ive.current_quantity }} <br>
              <span class="tag" ng-if="ive.low_stock" >Low on Stock</span>
            </td>
            <td style="width:5vw">{{ ive.borrowed_quantity }}</td>
            <td style="width:8.5vw">{{ ive.price.toLocaleString('vi-VN')}} $</td>
            <td>{{ ive.category }}</td>
            <td>{{ ive.remarks }}</td>
            <td style="width:14vw">
              <button type="button" class="btn btn-info custom-btn" ng-click="c.detail(ive.sys_id)" style="margin-left:8px">
                {{c.translations.butDetail}}
              </button>
              <button type="button" class="btn btn-warning custom-btn" ng-if="ive.active === '1'" ng-click="c.fillUpdate(ive.sys_id)">
                {{c.translations.butUpdate}}
              </button>
              <button type="button" class="btn btn-danger custom-btn" ng-if="ive.active === '1'" ng-click="c.changeActive(ive.sys_id)">
                {{c.translations.butArchive}}
              </button>
              <button type="button" class="btn btn-success custom-btn" ng-if="ive.active === '0'" ng-click="c.changeActive(ive.sys_id)">
                {{c.translations.butUnArchive}}
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <div class="pagination-controls" ng-if="c.getRoundedPageCount() > 0">
      <button class="btn btn-secondary" ng-disabled="c.pageNumber === 1" ng-click="c.loadPage(c.pageNumber - 1)">
        {{c.translations.previous}}
      </button>

      <span>{{c.translations.page}} {{ c.pageNumber }} / {{ c.getRoundedPageCount() }}</span>

      <button class="btn btn-secondary" ng-disabled="c.pageNumber >= c.getRoundedPageCount()"
              ng-click="c.loadPage(c.pageNumber + 1)">
        {{c.translations.next}}
      </button>
      <span>{{c.translations.goToPage}}</span>
      <input type="number"
             ng-model="c.targetPage"
             ng-change="c.goToPage()"
             min="1"
             max="{{ c.getRoundedPageCount() }}"
             class="page-input" />
    </div>

    <div class="custom-modal-overlay" ng-if="c.showAddModal">
      <div class="custom-modal">
        <div class="custom-modal-header">
          <h5>Add Inventory</h5>
          <button type="button" class="close-btn" ng-click="c.closeAddModal()">Ã</button>
        </div>
        <div class="custom-modal-body">
          <div class="input_inner">
            <label for="itemName">{{c.translations.Item_Name}} :</label>
            <input type="text" id="itemName" ng-model="c.newInve.item_name" />
          </div>

          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="quantity">{{c.translations.Quantity_Total}} :</label>
              <input type="number" id="quantity" ng-model="c.newInve.quantity" />
            </div>
            <div class="input_inner">
              <label for="quantity">{{c.translations.Warning_Stock}} :</label>
              <input type="number" id="quantity" ng-model="c.newInve.warning_quantity" />
            </div>
          </div>
          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="unitPrice">{{c.translations.Unit_Price}} :</label>
              <input type="number" id="unitPrice"  ng-model="c.newInve.price" />
            </div>

            <div class="input_inner">
              <label for="category">{{c.translations.Category}} :</label>
              <select id="caregory" ng-model="c.newInve.category">
                <option value="" disabled selected>Select Category</option>
                <option value="Office">Office Equipment</option>
                <option value="Electronics">Electronics</option>
                <option value="Vehicles">Vehicles</option>
                <option value="Books">Books</option>
              </select>
            </div>
          </div>
          <div class="input_inner">
            <label for="remarks">{{c.translations.Remarks}} :</label>
            <textarea id="remarks" ng-model="c.newInve.remarks"></textarea>
          </div>

          <div class="input_inner" >
            <label for="comment">{{c.translations.Description}} :</label>
            <textarea id="comment" ng-model="c.newInve.description" style="height: 90px"></textarea>
          </div>
        </div>
        <div class="custom-modal-footer">
          <button type="submit" class="btn btn-primary btn-block" ng-click="c.addnewInve()">
            {{c.translations.butAdd}}
          </button>
          <button type="button" class="btn-secondary" ng-click="c.closeAddModal()">{{c.translations.Close}}</button>
        </div>
      </div>
    </div>



    <div class="custom-modal-overlay" ng-if="c.showEditModal">
      <div class="custom-modal">
        <div class="custom-modal-header">
          <h5>Update Inventory</h5>
          <button type="button" class="close-btn" ng-click="c.closeEditModal()">Ã</button>
        </div>
        <div class="custom-modal-body">
          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="itemName">{{c.translations.Item_Name}} :</label>
              <input type="text" id="itemName" ng-model="c.editInve.item_name" readonly />
            </div>
            <div class="input_inner">
              <label for="itemId">{{c.translations.Item_ID}} :</label>
              <input type="text" id="itemId" ng-model="c.editInve.item_id" readonly />
            </div>
          </div>

          <label for="update" style="display: block; margin-bottom: 0px;">{{c.translations.Actions}} :</label>
          <div class="input_group">
            <div class="input_inner input_growd" >
              <div class="input_select">
                <label for="update" class="label_select">{{c.translations.updateQuantity}} :</label>
                <input class="checkbox_select" type="checkbox" value="update_quantity" name="action"
                       ng-model="c.editInve.action_type" ng-checked="c.editInve.action_type === 'update_quantity'"
                       ng-click="c.editInve.action_type = 'update_quantity'" />
              </div>

              <div class="input_select">
                <label for="return" class="label_select">{{c.translations.returnBorrowed}} :</label>
                <input class="checkbox_select" type="checkbox" value="return_borrowed" name="action"
                       ng-model="c.editInve.action_type" ng-checked="c.editInve.action_type === 'return_borrowed'"
                       ng-click="c.editInve.action_type = 'return_borrowed'" />
              </div>
            </div>

            <div style="flex: 2; position: relative; top: -10px;">
              <div class="input_inner input_growd" ng-show="c.editInve.action_type === 'update_quantity'">
                <label for="quantity">{{c.translations.updateQuantity}} :</label>
                <input type="number" id="quantity" ng-model="c.editInve.quantity_change" />
              </div>
              <div class="input_inner input_growd" ng-show="c.editInve.action_type === 'return_borrowed'">
                <label for="returnQuantity">{{c.translations.returnBorrowed}}:</label>
                <input type="number" id="returnQuantity" ng-model="c.editInve.quantity_change" />
              </div>
            </div>
          </div>

          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="quantity">{{c.translations.Quantity_Total}} :</label>
              <input type="number" id="quantity" ng-model="c.editInve.quantity" readonly />
            </div>
            <div class="input_inner">
              <label for="quantity">{{c.translations.Warning_Stock}}:</label>
              <input type="number" id="quantity" ng-model="c.editInve.warning_quantity" readonly/>
            </div>
          </div>
          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="unitPrice">{{c.translations.Unit_Price}} :</label>
              <input type="number" id="unitPrice" ng-model="c.editInve.price" />
            </div>

            <div class="input_inner">
              <label for="category">{{c.translations.Category}} :</label>
              <select id="caregory" ng-model="c.editInve.category" >
                <option value="" disabled selected>Select Category</option>
                <option value="Office">Office Equipment</option>
                <option value="Electronics">Electronics</option>
                <option value="Vehicles">Vehicles</option>
                <option value="Books">Books</option>
              </select>
            </div>
          </div>
          <div class="input_inner">
            <label for="remarks">{{c.translations.Remarks}} :</label>
            <textarea id="remarks" ng-model="c.editInve.remarks" readonly></textarea>
          </div>
        </div>
        <div class="custom-modal-footer">
          <button type="button" class="btn btn-primary btn-block" ng-click="c.update()">
            Update
          </button>
          <button type="button" class="btn-secondary" ng-click="c.closeEditModal()">{{c.translations.Close}}</button>
        </div>
      </div>
    </div>



    <div ng-show="c.showModal" class="custom-modal-overlay">
      <div class="custom-modal custom-detail">
        <div class="custom-modal-header">
          <h5>Detail Inventory</h5>
          <button type="button" class="close-btn" ng-click="c.closeModal()">
            Ã
          </button>
        </div>
        <div class="custom-modal-body">
          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="itemName">{{c.translations.Item_Name}}:</label>
              <input type="text" id="itemName" ng-model="data.detailInve.item_name" disabled />
            </div>
            <div class="input_inner input_growd">
              <label for="itemId">{{c.translations.Item_ID}}:</label>
              <input type="text" id="itemId" ng-model="data.detailInve.number" disabled />
            </div>
          </div>
          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="updateOn"> {{c.translations.Updated_on}}:</label>
              <input type="text" id="updateOn" ng-model="data.detailInve.sys_updated_on" disabled />
            </div>
            <div class="input_inner input_growd">
              <label for="createdOn">{{c.translations.Created_on}}:</label>
              <input type="text" id="createdOn" ng-model="data.detailInve.sys_created_on" disabled />
            </div>
          </div>
          <div class="input_group">
            <div class="input_inner input_growd">
              <label for="createdBy"> {{c.translations.Created_by}}:</label>
              <input type="text" id="createdBy" ng-model="data.detailInve.sys_created_by" disabled />
            </div>
            <div class="input_inner input_growd">
              <label for="updatedBy"> {{c.translations.Updated_by}}:</label>
              <input type="text" id="updatedBy" ng-model="data.detailInve.sys_updated_by" disabled />
            </div>
          </div>
        </div>
        <div class="custom-modal-table">
          <div>
            <table style="width:100%">
              <thead>
                <tr>
                  <th>{{c.translations.Index}}</th>
                  <th>{{c.translations.Time}}</th>
                  <th>{{c.translations.Quantity_Total}}</th>
                  <th>{{c.translations.Current_Quantity}}</th>
                  <th>{{c.translations.Quantity_Changed}}</th>
                  <th>{{c.translations.Actions}}</th>
                  <th>{{c.translations.Requester}}</th>
                  <th>{{c.translations.Description}}</th>
                </tr>
              </thead>
              <tbody>
                <tr ng-repeat="his in data.histories">
                  <td>{{ $index + 1 }}</td>
                  <td>{{ his.time }}</td>
                  <td>{{ his.quantity_old }}</td>
                  <td>{{ his.quantity_new }}</td>
                  <td>{{ his.quantity_changed }}</td>
                  <td>{{ his.type }}</td>
                  <td>{{ his.action_by }}</td>
                  <td>{{ his.description }}</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        <div class="custom-modal-footer">
          <button type="button" class="btn-secondary" ng-click="c.closeModal()">
            {{c.translations.Close}}
          </button>
        </div>
      </div>
    </div>
  </div>
</body>]]></template>
    </sp_widget>
</record_update>
